/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStaking {
  export type PoolInfoStruct = {
    accRewardPerShare: BigNumberish;
    accMPPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    totalDeposit: BigNumberish;
    totalMP: BigNumberish;
    rewardToken: AddressLike;
    isInputNative: boolean;
    isRewardNative: boolean;
    activatedMP: boolean;
    lock: boolean;
    path: AddressLike[];
    breaker: AddressLike;
    breakerSetter: AddressLike;
  };

  export type PoolInfoStructOutput = [
    accRewardPerShare: bigint,
    accMPPerShare: bigint,
    lastRewardBlock: bigint,
    totalDeposit: bigint,
    totalMP: bigint,
    rewardToken: string,
    isInputNative: boolean,
    isRewardNative: boolean,
    activatedMP: boolean,
    lock: boolean,
    path: string[],
    breaker: string,
    breakerSetter: string
  ] & {
    accRewardPerShare: bigint;
    accMPPerShare: bigint;
    lastRewardBlock: bigint;
    totalDeposit: bigint;
    totalMP: bigint;
    rewardToken: string;
    isInputNative: boolean;
    isRewardNative: boolean;
    activatedMP: boolean;
    lock: boolean;
    path: string[];
    breaker: string;
    breakerSetter: string;
  };

  export type UserInfoStruct = {
    amount: BigNumberish;
    rewardDebt: BigNumberish;
    pendingReward: BigNumberish;
    pendingAmountReward: BigNumberish;
    lastRewardClaimed: BigNumberish;
  };

  export type UserInfoStructOutput = [
    amount: bigint,
    rewardDebt: bigint,
    pendingReward: bigint,
    pendingAmountReward: bigint,
    lastRewardClaimed: bigint
  ] & {
    amount: bigint;
    rewardDebt: bigint;
    pendingReward: bigint;
    pendingAmountReward: bigint;
    lastRewardClaimed: bigint;
  };

  export type UserMPInfoStruct = {
    staked: BigNumberish;
    lastMPUpdatedTime: BigNumberish;
  };

  export type UserMPInfoStructOutput = [
    staked: bigint,
    lastMPUpdatedTime: bigint
  ] & { staked: bigint; lastMPUpdatedTime: bigint };
}

export interface StakingV7Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS_DIVISOR"
      | "MP_DUARTION"
      | "SWAP_DIVISOR"
      | "add"
      | "claim"
      | "claimWithSwap"
      | "compound"
      | "computePendingAmountReward"
      | "deposit"
      | "getLPToken"
      | "getPoolInfo"
      | "getRewarder"
      | "getUserInfo"
      | "getUserMPInfo"
      | "initialize"
      | "lockContract"
      | "massUpdatePools"
      | "migrate_withdraw_all"
      | "migrationFlag"
      | "multiplierPointBasis"
      | "owner"
      | "pendingMP"
      | "pendingReward"
      | "pendingRewardInfo"
      | "poolLength"
      | "renounceOwnership"
      | "router"
      | "set"
      | "setMultiplierPointBasis"
      | "setPoolBreaker"
      | "setPoolBreakerSetter"
      | "setSwapSlippage"
      | "setWhitelist"
      | "setWhitelistSetter"
      | "swapSlippage"
      | "transferOwnership"
      | "unlockContract"
      | "updateMP"
      | "updatePool"
      | "whitelist"
      | "whitelistSetter"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Harvest"
      | "Initialized"
      | "LockContract"
      | "LogPoolAddition"
      | "LogSetPool"
      | "LogUpdatePool"
      | "OwnershipTransferred"
      | "SetMultiplierPointBasis"
      | "SetPoolBreaker"
      | "SetPoolBreakerSetter"
      | "SetSwapSlippage"
      | "SetWhitelist"
      | "SetWhitelistSetter"
      | "UnlockContract"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MP_DUARTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike[],
      boolean,
      boolean,
      boolean,
      boolean,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithSwap",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computePendingAmountReward",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMPInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate_withdraw_all",
    values: [BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPointBasis",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMP",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewardInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, AddressLike, AddressLike[], boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplierPointBasis",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreaker",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreakerSetter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistSetter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MP_DUARTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computePendingAmountReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMPInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrate_withdraw_all",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPointBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingMP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplierPointBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreakerSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateMP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike,
    lpAddress: AddressLike,
    rewardAddress: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string,
    lpAddress: string,
    rewardAddress: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
    lpAddress: string;
    rewardAddress: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    lpAddress: AddressLike,
    rewardAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    lpAddress: string,
    rewardAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    lpAddress: string;
    rewardAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockContractEvent {
  export type InputTuple = [pid: BigNumberish];
  export type OutputTuple = [pid: bigint];
  export interface OutputObject {
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogPoolAdditionEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lpToken: AddressLike,
    rewarder: AddressLike,
    isInputNative: boolean,
    isRewardNative: boolean,
    lock: boolean,
    breaker: AddressLike,
    breakerSetter: AddressLike
  ];
  export type OutputTuple = [
    pid: bigint,
    lpToken: string,
    rewarder: string,
    isInputNative: boolean,
    isRewardNative: boolean,
    lock: boolean,
    breaker: string,
    breakerSetter: string
  ];
  export interface OutputObject {
    pid: bigint;
    lpToken: string;
    rewarder: string;
    isInputNative: boolean;
    isRewardNative: boolean;
    lock: boolean;
    breaker: string;
    breakerSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetPoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    rewarder: AddressLike,
    path: AddressLike[],
    rewarderOverwrite: boolean,
    pathOverwrite: boolean
  ];
  export type OutputTuple = [
    pid: bigint,
    rewarder: string,
    path: string[],
    rewarderOverwrite: boolean,
    pathOverwrite: boolean
  ];
  export interface OutputObject {
    pid: bigint;
    rewarder: string;
    path: string[];
    rewarderOverwrite: boolean;
    pathOverwrite: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdatePoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lastRewardBlock: BigNumberish,
    lpSupply: BigNumberish,
    accRewardPerShare: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    lastRewardBlock: bigint,
    lpSupply: bigint,
    accRewardPerShare: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    lastRewardBlock: bigint;
    lpSupply: bigint;
    accRewardPerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMultiplierPointBasisEvent {
  export type InputTuple = [prev: BigNumberish, curr: BigNumberish];
  export type OutputTuple = [prev: bigint, curr: bigint];
  export interface OutputObject {
    prev: bigint;
    curr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerEvent {
  export type InputTuple = [pid: BigNumberish, breaker: AddressLike];
  export type OutputTuple = [pid: bigint, breaker: string];
  export interface OutputObject {
    pid: bigint;
    breaker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerSetterEvent {
  export type InputTuple = [pid: BigNumberish, breakerSetter: AddressLike];
  export type OutputTuple = [pid: bigint, breakerSetter: string];
  export interface OutputObject {
    pid: bigint;
    breakerSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSwapSlippageEvent {
  export type InputTuple = [swapSlippage: BigNumberish];
  export type OutputTuple = [swapSlippage: bigint];
  export interface OutputObject {
    swapSlippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWhitelistEvent {
  export type InputTuple = [account: AddressLike, allow: boolean];
  export type OutputTuple = [account: string, allow: boolean];
  export interface OutputObject {
    account: string;
    allow: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWhitelistSetterEvent {
  export type InputTuple = [whitelistSetter: AddressLike];
  export type OutputTuple = [whitelistSetter: string];
  export interface OutputObject {
    whitelistSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockContractEvent {
  export type InputTuple = [pid: BigNumberish];
  export type OutputTuple = [pid: bigint];
  export interface OutputObject {
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike,
    lpAddress: AddressLike,
    rewardAddress: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string,
    lpAddress: string,
    rewardAddress: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
    lpAddress: string;
    rewardAddress: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingV7 extends BaseContract {
  connect(runner?: ContractRunner | null): StakingV7;
  waitForDeployment(): Promise<this>;

  interface: StakingV7Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  MP_DUARTION: TypedContractMethod<[], [bigint], "view">;

  SWAP_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  add: TypedContractMethod<
    [
      lpToken_: AddressLike,
      reward: AddressLike,
      rewarder_: AddressLike,
      _path: AddressLike[],
      _inputNative: boolean,
      _rewardNative: boolean,
      _activatedMP: boolean,
      _lock: boolean,
      _breaker: AddressLike,
      _breakerSetter: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  claimWithSwap: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  compound: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  computePendingAmountReward: TypedContractMethod<
    [
      pendingRewardAmount: BigNumberish,
      lpAmount: BigNumberish,
      mpAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean
    ],
    [void],
    "payable"
  >;

  getLPToken: TypedContractMethod<[pid: BigNumberish], [string], "view">;

  getPoolInfo: TypedContractMethod<
    [pid: BigNumberish],
    [IStaking.PoolInfoStructOutput],
    "view"
  >;

  getRewarder: TypedContractMethod<[pid: BigNumberish], [string], "view">;

  getUserInfo: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [IStaking.UserInfoStructOutput],
    "view"
  >;

  getUserMPInfo: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [IStaking.UserMPInfoStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  lockContract: TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;

  massUpdatePools: TypedContractMethod<
    [pids: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  migrate_withdraw_all: TypedContractMethod<
    [pid: BigNumberish, froms_: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  migrationFlag: TypedContractMethod<[], [boolean], "view">;

  multiplierPointBasis: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingMP: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;

  pendingReward: TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  pendingRewardInfo: TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalPendingReward: bigint;
        lpPendingReward: bigint;
        mpPendingReward: bigint;
      }
    ],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  set: TypedContractMethod<
    [
      pid: BigNumberish,
      rewarder_: AddressLike,
      _path: AddressLike[],
      rewarderOverwrite: boolean,
      pathOverwrite: boolean
    ],
    [void],
    "nonpayable"
  >;

  setMultiplierPointBasis: TypedContractMethod<
    [newMultiplierPointBasis: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolBreaker: TypedContractMethod<
    [pid: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolBreakerSetter: TypedContractMethod<
    [pid: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapSlippage: TypedContractMethod<
    [_swapSlippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [account: AddressLike, allow: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelistSetter: TypedContractMethod<
    [_whitelistSetter: AddressLike],
    [void],
    "nonpayable"
  >;

  swapSlippage: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockContract: TypedContractMethod<
    [pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMP: TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;

  updatePool: TypedContractMethod<
    [pid: BigNumberish],
    [IStaking.PoolInfoStructOutput],
    "payable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  whitelistSetter: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MP_DUARTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SWAP_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [
      lpToken_: AddressLike,
      reward: AddressLike,
      rewarder_: AddressLike,
      _path: AddressLike[],
      _inputNative: boolean,
      _rewardNative: boolean,
      _activatedMP: boolean,
      _lock: boolean,
      _breaker: AddressLike,
      _breakerSetter: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimWithSwap"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compound"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computePendingAmountReward"
  ): TypedContractMethod<
    [
      pendingRewardAmount: BigNumberish,
      lpAmount: BigNumberish,
      mpAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getLPToken"
  ): TypedContractMethod<[pid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IStaking.PoolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewarder"
  ): TypedContractMethod<[pid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [IStaking.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMPInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [IStaking.UserMPInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockContract"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "massUpdatePools"
  ): TypedContractMethod<[pids: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrate_withdraw_all"
  ): TypedContractMethod<
    [pid: BigNumberish, froms_: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrationFlag"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiplierPointBasis"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingMP"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingReward"
  ): TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingRewardInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalPendingReward: bigint;
        lpPendingReward: bigint;
        mpPendingReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      rewarder_: AddressLike,
      _path: AddressLike[],
      rewarderOverwrite: boolean,
      pathOverwrite: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMultiplierPointBasis"
  ): TypedContractMethod<
    [newMultiplierPointBasis: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolBreaker"
  ): TypedContractMethod<
    [pid: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolBreakerSetter"
  ): TypedContractMethod<
    [pid: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapSlippage"
  ): TypedContractMethod<[_swapSlippage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [account: AddressLike, allow: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistSetter"
  ): TypedContractMethod<[_whitelistSetter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapSlippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockContract"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMP"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IStaking.PoolInfoStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistSetter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LockContract"
  ): TypedContractEvent<
    LockContractEvent.InputTuple,
    LockContractEvent.OutputTuple,
    LockContractEvent.OutputObject
  >;
  getEvent(
    key: "LogPoolAddition"
  ): TypedContractEvent<
    LogPoolAdditionEvent.InputTuple,
    LogPoolAdditionEvent.OutputTuple,
    LogPoolAdditionEvent.OutputObject
  >;
  getEvent(
    key: "LogSetPool"
  ): TypedContractEvent<
    LogSetPoolEvent.InputTuple,
    LogSetPoolEvent.OutputTuple,
    LogSetPoolEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdatePool"
  ): TypedContractEvent<
    LogUpdatePoolEvent.InputTuple,
    LogUpdatePoolEvent.OutputTuple,
    LogUpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetMultiplierPointBasis"
  ): TypedContractEvent<
    SetMultiplierPointBasisEvent.InputTuple,
    SetMultiplierPointBasisEvent.OutputTuple,
    SetMultiplierPointBasisEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreaker"
  ): TypedContractEvent<
    SetPoolBreakerEvent.InputTuple,
    SetPoolBreakerEvent.OutputTuple,
    SetPoolBreakerEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreakerSetter"
  ): TypedContractEvent<
    SetPoolBreakerSetterEvent.InputTuple,
    SetPoolBreakerSetterEvent.OutputTuple,
    SetPoolBreakerSetterEvent.OutputObject
  >;
  getEvent(
    key: "SetSwapSlippage"
  ): TypedContractEvent<
    SetSwapSlippageEvent.InputTuple,
    SetSwapSlippageEvent.OutputTuple,
    SetSwapSlippageEvent.OutputObject
  >;
  getEvent(
    key: "SetWhitelist"
  ): TypedContractEvent<
    SetWhitelistEvent.InputTuple,
    SetWhitelistEvent.OutputTuple,
    SetWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "SetWhitelistSetter"
  ): TypedContractEvent<
    SetWhitelistSetterEvent.InputTuple,
    SetWhitelistSetterEvent.OutputTuple,
    SetWhitelistSetterEvent.OutputObject
  >;
  getEvent(
    key: "UnlockContract"
  ): TypedContractEvent<
    UnlockContractEvent.InputTuple,
    UnlockContractEvent.OutputTuple,
    UnlockContractEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256,address,address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Harvest(address,uint256,address,address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LockContract(uint256)": TypedContractEvent<
      LockContractEvent.InputTuple,
      LockContractEvent.OutputTuple,
      LockContractEvent.OutputObject
    >;
    LockContract: TypedContractEvent<
      LockContractEvent.InputTuple,
      LockContractEvent.OutputTuple,
      LockContractEvent.OutputObject
    >;

    "LogPoolAddition(uint256,address,address,bool,bool,bool,address,address)": TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;
    LogPoolAddition: TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;

    "LogSetPool(uint256,address,address[],bool,bool)": TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;
    LogSetPool: TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;

    "LogUpdatePool(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;
    LogUpdatePool: TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetMultiplierPointBasis(uint256,uint256)": TypedContractEvent<
      SetMultiplierPointBasisEvent.InputTuple,
      SetMultiplierPointBasisEvent.OutputTuple,
      SetMultiplierPointBasisEvent.OutputObject
    >;
    SetMultiplierPointBasis: TypedContractEvent<
      SetMultiplierPointBasisEvent.InputTuple,
      SetMultiplierPointBasisEvent.OutputTuple,
      SetMultiplierPointBasisEvent.OutputObject
    >;

    "SetPoolBreaker(uint256,address)": TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;
    SetPoolBreaker: TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;

    "SetPoolBreakerSetter(uint256,address)": TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;
    SetPoolBreakerSetter: TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;

    "SetSwapSlippage(uint256)": TypedContractEvent<
      SetSwapSlippageEvent.InputTuple,
      SetSwapSlippageEvent.OutputTuple,
      SetSwapSlippageEvent.OutputObject
    >;
    SetSwapSlippage: TypedContractEvent<
      SetSwapSlippageEvent.InputTuple,
      SetSwapSlippageEvent.OutputTuple,
      SetSwapSlippageEvent.OutputObject
    >;

    "SetWhitelist(address,bool)": TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;
    SetWhitelist: TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;

    "SetWhitelistSetter(address)": TypedContractEvent<
      SetWhitelistSetterEvent.InputTuple,
      SetWhitelistSetterEvent.OutputTuple,
      SetWhitelistSetterEvent.OutputObject
    >;
    SetWhitelistSetter: TypedContractEvent<
      SetWhitelistSetterEvent.InputTuple,
      SetWhitelistSetterEvent.OutputTuple,
      SetWhitelistSetterEvent.OutputObject
    >;

    "UnlockContract(uint256)": TypedContractEvent<
      UnlockContractEvent.InputTuple,
      UnlockContractEvent.OutputTuple,
      UnlockContractEvent.OutputObject
    >;
    UnlockContract: TypedContractEvent<
      UnlockContractEvent.InputTuple,
      UnlockContractEvent.OutputTuple,
      UnlockContractEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,address,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
