/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace INCPStaking {
  export type FeeRatioRequestInfoStruct = {
    ratio: BigNumberish;
    requestBlockNumber: BigNumberish;
  };

  export type FeeRatioRequestInfoStructOutput = [
    ratio: bigint,
    requestBlockNumber: bigint
  ] & { ratio: bigint; requestBlockNumber: bigint };

  export type PoolInfoStruct = {
    ncp: AddressLike;
    name: BytesLike;
    accRewardPerShare: BigNumberish;
    accMPPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    totalDeposit: BigNumberish;
    totalMP: BigNumberish;
    unbondTime: BigNumberish;
    totalRequestedWithdrawal: BigNumberish;
    feeRatio: BigNumberish;
    activatedMP: boolean;
    lock: boolean;
    breaker: AddressLike;
    breakerSetter: AddressLike;
    feeCollector: AddressLike;
    totalDepositors: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    ncp: string,
    name: string,
    accRewardPerShare: bigint,
    accMPPerShare: bigint,
    lastRewardBlock: bigint,
    totalDeposit: bigint,
    totalMP: bigint,
    unbondTime: bigint,
    totalRequestedWithdrawal: bigint,
    feeRatio: bigint,
    activatedMP: boolean,
    lock: boolean,
    breaker: string,
    breakerSetter: string,
    feeCollector: string,
    totalDepositors: bigint
  ] & {
    ncp: string;
    name: string;
    accRewardPerShare: bigint;
    accMPPerShare: bigint;
    lastRewardBlock: bigint;
    totalDeposit: bigint;
    totalMP: bigint;
    unbondTime: bigint;
    totalRequestedWithdrawal: bigint;
    feeRatio: bigint;
    activatedMP: boolean;
    lock: boolean;
    breaker: string;
    breakerSetter: string;
    feeCollector: string;
    totalDepositors: bigint;
  };

  export type UserInfoStruct = {
    amount: BigNumberish;
    rewardDebt: BigNumberish;
    pendingReward: BigNumberish;
    pendingAmountReward: BigNumberish;
    lastRewardClaimed: BigNumberish;
  };

  export type UserInfoStructOutput = [
    amount: bigint,
    rewardDebt: bigint,
    pendingReward: bigint,
    pendingAmountReward: bigint,
    lastRewardClaimed: bigint
  ] & {
    amount: bigint;
    rewardDebt: bigint;
    pendingReward: bigint;
    pendingAmountReward: bigint;
    lastRewardClaimed: bigint;
  };

  export type UserMPInfoStruct = {
    staked: BigNumberish;
    lastMPUpdatedTime: BigNumberish;
  };

  export type UserMPInfoStructOutput = [
    staked: bigint,
    lastMPUpdatedTime: bigint
  ] & { staked: bigint; lastMPUpdatedTime: bigint };
}

export interface NCPStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS_DIVISOR"
      | "FEE_PRECISION"
      | "MP_DUARTION"
      | "add"
      | "changeNCP"
      | "claim"
      | "compound"
      | "computePendingAmountReward"
      | "deposit"
      | "feeRatioRequestDelay"
      | "feeRatioRequests"
      | "getFeeRequestInfo"
      | "getPlatformFeeRatio"
      | "getPoolInfo"
      | "getRewarder"
      | "getUserInfo"
      | "getUserMPInfo"
      | "governance"
      | "governanceStaking"
      | "initialize"
      | "isRewarder"
      | "lockContract"
      | "massUpdatePools"
      | "multiplierPointBasis"
      | "ncpDeposit"
      | "ncpToIdx"
      | "ncpWithdraw"
      | "owner"
      | "pendingMP"
      | "pendingReward"
      | "pendingRewardInfo"
      | "platformFeeCollector"
      | "platformFeeRatio"
      | "poolLength"
      | "renounceOwnership"
      | "setFeeCollector"
      | "setMultiplierPointBasis"
      | "setPlatformFeeRatio"
      | "setPoolBreaker"
      | "setPoolBreakerSetter"
      | "setRewardFeeRatio"
      | "setRewardFeeRatioRequest"
      | "setRewardFeeRatioRequestDelay"
      | "setUnbondTime"
      | "setWithdrawalNFT"
      | "transferOwnership"
      | "unlockContract"
      | "updateMP"
      | "updatePool"
      | "version"
      | "withdraw"
      | "withdrawAll"
      | "withdrawAllWithPid"
      | "withdrawRequest"
      | "withdrawalNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Harvest"
      | "Initialized"
      | "LockContract"
      | "LogOnReward"
      | "LogPoolAddition"
      | "LogSetPool"
      | "LogUpdatePool"
      | "NCPDeposit"
      | "NCPHarvest"
      | "NCPWithdraw"
      | "OwnershipTransferred"
      | "SetFeeCollector"
      | "SetMultiplierPointBasis"
      | "SetPlatformFeeRatio"
      | "SetPoolBreaker"
      | "SetPoolBreakerSetter"
      | "SetRewardFeeRatio"
      | "SetRewardFeeRatioRequest"
      | "SetRewardFeeRatioRequestDelay"
      | "SetUnbondTime"
      | "SetWithdrawalNFT"
      | "UnlockContract"
      | "Withdraw"
      | "WithdrawRequest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MP_DUARTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      boolean,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNCP",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computePendingAmountReward",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRatioRequestDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRatioRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRequestInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMPInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRewarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPointBasis",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ncpDeposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ncpToIdx",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ncpWithdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMP",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewardInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplierPointBasis",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreaker",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreakerSetter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFeeRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFeeRatioRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFeeRatioRequestDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbondTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllWithPid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MP_DUARTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeNCP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computePendingAmountReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRatioRequestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRatioRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMPInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRewarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPointBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ncpDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ncpToIdx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ncpWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingMP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplierPointBasis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreakerSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFeeRatioRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFeeRatioRequestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbondTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateMP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllWithPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalNFT",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockContractEvent {
  export type InputTuple = [pid: BigNumberish];
  export type OutputTuple = [pid: bigint];
  export interface OutputObject {
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogOnRewardEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogPoolAdditionEvent {
  export type InputTuple = [
    pid: BigNumberish,
    rewarder: AddressLike,
    lock: boolean,
    breaker: AddressLike,
    breakerSetter: AddressLike,
    feeRatio: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    rewarder: string,
    lock: boolean,
    breaker: string,
    breakerSetter: string,
    feeRatio: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    rewarder: string;
    lock: boolean;
    breaker: string;
    breakerSetter: string;
    feeRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetPoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    rewarder: AddressLike,
    feeCollector: AddressLike,
    feeRatio: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    rewarder: string,
    feeCollector: string,
    feeRatio: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    rewarder: string;
    feeCollector: string;
    feeRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdatePoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lastRewardBlock: BigNumberish,
    lpSupply: BigNumberish,
    accRewardPerShare: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    lastRewardBlock: bigint,
    lpSupply: bigint,
    accRewardPerShare: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    lastRewardBlock: bigint;
    lpSupply: bigint;
    accRewardPerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NCPDepositEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    name: BytesLike,
    ncp: AddressLike,
    amount: BigNumberish,
    to: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    name: string,
    ncp: string,
    amount: bigint,
    to: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    name: string;
    ncp: string;
    amount: bigint;
    to: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NCPHarvestEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    name: BytesLike,
    ncp: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    name: string,
    ncp: string,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    name: string;
    ncp: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NCPWithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    name: BytesLike,
    ncp: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    name: string,
    ncp: string,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    name: string;
    ncp: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeCollectorEvent {
  export type InputTuple = [prev: AddressLike, curr: AddressLike];
  export type OutputTuple = [prev: string, curr: string];
  export interface OutputObject {
    prev: string;
    curr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMultiplierPointBasisEvent {
  export type InputTuple = [prev: BigNumberish, curr: BigNumberish];
  export type OutputTuple = [prev: bigint, curr: bigint];
  export interface OutputObject {
    prev: bigint;
    curr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPlatformFeeRatioEvent {
  export type InputTuple = [prev: BigNumberish, curr: BigNumberish];
  export type OutputTuple = [prev: bigint, curr: bigint];
  export interface OutputObject {
    prev: bigint;
    curr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerEvent {
  export type InputTuple = [pid: BigNumberish, breaker: AddressLike];
  export type OutputTuple = [pid: bigint, breaker: string];
  export interface OutputObject {
    pid: bigint;
    breaker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerSetterEvent {
  export type InputTuple = [pid: BigNumberish, breakerSetter: AddressLike];
  export type OutputTuple = [pid: bigint, breakerSetter: string];
  export interface OutputObject {
    pid: bigint;
    breakerSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRewardFeeRatioEvent {
  export type InputTuple = [
    pid: BigNumberish,
    prev: BigNumberish,
    curr: BigNumberish
  ];
  export type OutputTuple = [pid: bigint, prev: bigint, curr: bigint];
  export interface OutputObject {
    pid: bigint;
    prev: bigint;
    curr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRewardFeeRatioRequestEvent {
  export type InputTuple = [
    pid: BigNumberish,
    prev: BigNumberish,
    curr: BigNumberish,
    executeBlockNumber: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    prev: bigint,
    curr: bigint,
    executeBlockNumber: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    prev: bigint;
    curr: bigint;
    executeBlockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRewardFeeRatioRequestDelayEvent {
  export type InputTuple = [prev: BigNumberish, curr: BigNumberish];
  export type OutputTuple = [prev: bigint, curr: bigint];
  export interface OutputObject {
    prev: bigint;
    curr: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUnbondTimeEvent {
  export type InputTuple = [time: BigNumberish];
  export type OutputTuple = [time: bigint];
  export interface OutputObject {
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawalNFTEvent {
  export type InputTuple = [prev: AddressLike, curr: AddressLike];
  export type OutputTuple = [prev: string, curr: string];
  export interface OutputObject {
    prev: string;
    curr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockContractEvent {
  export type InputTuple = [pid: BigNumberish];
  export type OutputTuple = [pid: bigint];
  export interface OutputObject {
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    name: BytesLike,
    ncp: AddressLike,
    amount: BigNumberish,
    to: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    name: string,
    ncp: string,
    amount: bigint,
    to: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    name: string;
    ncp: string;
    amount: bigint;
    to: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NCPStaking extends BaseContract {
  connect(runner?: ContractRunner | null): NCPStaking;
  waitForDeployment(): Promise<this>;

  interface: NCPStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  FEE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  MP_DUARTION: TypedContractMethod<[], [bigint], "view">;

  add: TypedContractMethod<
    [
      _ncp: AddressLike,
      _feeCollector: AddressLike,
      _rewarder: AddressLike,
      _activatedMP: boolean,
      _lock: boolean,
      _breaker: AddressLike,
      _breakerSetter: AddressLike,
      _feeRatio: BigNumberish,
      _initValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  changeNCP: TypedContractMethod<
    [
      pid: BigNumberish,
      toPid: BigNumberish,
      tokenId: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      cancle: boolean
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  compound: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  computePendingAmountReward: TypedContractMethod<
    [
      pendingRewardAmount: BigNumberish,
      lpAmount: BigNumberish,
      mpAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      comp: boolean
    ],
    [void],
    "payable"
  >;

  feeRatioRequestDelay: TypedContractMethod<[], [bigint], "view">;

  feeRatioRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { ratio: bigint; requestBlockNumber: bigint }],
    "view"
  >;

  getFeeRequestInfo: TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.FeeRatioRequestInfoStructOutput],
    "view"
  >;

  getPlatformFeeRatio: TypedContractMethod<[], [bigint], "view">;

  getPoolInfo: TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.PoolInfoStructOutput],
    "view"
  >;

  getRewarder: TypedContractMethod<[pid: BigNumberish], [string], "view">;

  getUserInfo: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [INCPStaking.UserInfoStructOutput],
    "view"
  >;

  getUserMPInfo: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [INCPStaking.UserMPInfoStructOutput],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceStaking: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _governance: AddressLike,
      _governanceStaking: AddressLike,
      _feeRatioRequestDelay: BigNumberish,
      _platformFeeCollector: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isRewarder: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lockContract: TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;

  massUpdatePools: TypedContractMethod<
    [pids: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  multiplierPointBasis: TypedContractMethod<[], [bigint], "view">;

  ncpDeposit: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;

  ncpToIdx: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  ncpWithdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingMP: TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;

  pendingReward: TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  pendingRewardInfo: TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalPendingReward: bigint;
        lpPendingReward: bigint;
        mpPendingReward: bigint;
      }
    ],
    "view"
  >;

  platformFeeCollector: TypedContractMethod<[], [string], "view">;

  platformFeeRatio: TypedContractMethod<[], [bigint], "view">;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeCollector: TypedContractMethod<
    [pid: BigNumberish, _feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  setMultiplierPointBasis: TypedContractMethod<
    [newMultiplierPointBasis: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFeeRatio: TypedContractMethod<
    [_platformFeeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolBreaker: TypedContractMethod<
    [pid: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolBreakerSetter: TypedContractMethod<
    [pid: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardFeeRatio: TypedContractMethod<
    [pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardFeeRatioRequest: TypedContractMethod<
    [pid: BigNumberish, _feeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardFeeRatioRequestDelay: TypedContractMethod<
    [_feeRatioRequestDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUnbondTime: TypedContractMethod<
    [pid: BigNumberish, time: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawalNFT: TypedContractMethod<
    [_withdrawalNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockContract: TypedContractMethod<
    [pid: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMP: TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;

  updatePool: TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.PoolInfoStructOutput],
    "payable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [pid: BigNumberish, tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  withdrawAllWithPid: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawRequest: TypedContractMethod<
    [
      pid: BigNumberish,
      toPid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      comp: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawalNFT: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MP_DUARTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [
      _ncp: AddressLike,
      _feeCollector: AddressLike,
      _rewarder: AddressLike,
      _activatedMP: boolean,
      _lock: boolean,
      _breaker: AddressLike,
      _breakerSetter: AddressLike,
      _feeRatio: BigNumberish,
      _initValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeNCP"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      toPid: BigNumberish,
      tokenId: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      cancle: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compound"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computePendingAmountReward"
  ): TypedContractMethod<
    [
      pendingRewardAmount: BigNumberish,
      lpAmount: BigNumberish,
      mpAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      comp: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeRatioRequestDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRatioRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { ratio: bigint; requestBlockNumber: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeRequestInfo"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.FeeRatioRequestInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlatformFeeRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.PoolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewarder"
  ): TypedContractMethod<[pid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [INCPStaking.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMPInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [INCPStaking.UserMPInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _governance: AddressLike,
      _governanceStaking: AddressLike,
      _feeRatioRequestDelay: BigNumberish,
      _platformFeeCollector: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isRewarder"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockContract"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "massUpdatePools"
  ): TypedContractMethod<[pids: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "multiplierPointBasis"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ncpDeposit"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ncpToIdx"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ncpWithdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingMP"
  ): TypedContractMethod<
    [pid: BigNumberish, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingReward"
  ): TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingRewardInfo"
  ): TypedContractMethod<
    [pid: BigNumberish, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalPendingReward: bigint;
        lpPendingReward: bigint;
        mpPendingReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFeeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<
    [pid: BigNumberish, _feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMultiplierPointBasis"
  ): TypedContractMethod<
    [newMultiplierPointBasis: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFeeRatio"
  ): TypedContractMethod<
    [_platformFeeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolBreaker"
  ): TypedContractMethod<
    [pid: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolBreakerSetter"
  ): TypedContractMethod<
    [pid: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardFeeRatio"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardFeeRatioRequest"
  ): TypedContractMethod<
    [pid: BigNumberish, _feeRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardFeeRatioRequestDelay"
  ): TypedContractMethod<
    [_feeRatioRequestDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnbondTime"
  ): TypedContractMethod<
    [pid: BigNumberish, time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawalNFT"
  ): TypedContractMethod<[_withdrawalNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockContract"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMP"
  ): TypedContractMethod<[pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [INCPStaking.PoolInfoStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [pid: BigNumberish, tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAllWithPid"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawRequest"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      toPid: BigNumberish,
      amount: BigNumberish,
      to: AddressLike,
      claimReward: boolean,
      comp: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalNFT"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LockContract"
  ): TypedContractEvent<
    LockContractEvent.InputTuple,
    LockContractEvent.OutputTuple,
    LockContractEvent.OutputObject
  >;
  getEvent(
    key: "LogOnReward"
  ): TypedContractEvent<
    LogOnRewardEvent.InputTuple,
    LogOnRewardEvent.OutputTuple,
    LogOnRewardEvent.OutputObject
  >;
  getEvent(
    key: "LogPoolAddition"
  ): TypedContractEvent<
    LogPoolAdditionEvent.InputTuple,
    LogPoolAdditionEvent.OutputTuple,
    LogPoolAdditionEvent.OutputObject
  >;
  getEvent(
    key: "LogSetPool"
  ): TypedContractEvent<
    LogSetPoolEvent.InputTuple,
    LogSetPoolEvent.OutputTuple,
    LogSetPoolEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdatePool"
  ): TypedContractEvent<
    LogUpdatePoolEvent.InputTuple,
    LogUpdatePoolEvent.OutputTuple,
    LogUpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "NCPDeposit"
  ): TypedContractEvent<
    NCPDepositEvent.InputTuple,
    NCPDepositEvent.OutputTuple,
    NCPDepositEvent.OutputObject
  >;
  getEvent(
    key: "NCPHarvest"
  ): TypedContractEvent<
    NCPHarvestEvent.InputTuple,
    NCPHarvestEvent.OutputTuple,
    NCPHarvestEvent.OutputObject
  >;
  getEvent(
    key: "NCPWithdraw"
  ): TypedContractEvent<
    NCPWithdrawEvent.InputTuple,
    NCPWithdrawEvent.OutputTuple,
    NCPWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeCollector"
  ): TypedContractEvent<
    SetFeeCollectorEvent.InputTuple,
    SetFeeCollectorEvent.OutputTuple,
    SetFeeCollectorEvent.OutputObject
  >;
  getEvent(
    key: "SetMultiplierPointBasis"
  ): TypedContractEvent<
    SetMultiplierPointBasisEvent.InputTuple,
    SetMultiplierPointBasisEvent.OutputTuple,
    SetMultiplierPointBasisEvent.OutputObject
  >;
  getEvent(
    key: "SetPlatformFeeRatio"
  ): TypedContractEvent<
    SetPlatformFeeRatioEvent.InputTuple,
    SetPlatformFeeRatioEvent.OutputTuple,
    SetPlatformFeeRatioEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreaker"
  ): TypedContractEvent<
    SetPoolBreakerEvent.InputTuple,
    SetPoolBreakerEvent.OutputTuple,
    SetPoolBreakerEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreakerSetter"
  ): TypedContractEvent<
    SetPoolBreakerSetterEvent.InputTuple,
    SetPoolBreakerSetterEvent.OutputTuple,
    SetPoolBreakerSetterEvent.OutputObject
  >;
  getEvent(
    key: "SetRewardFeeRatio"
  ): TypedContractEvent<
    SetRewardFeeRatioEvent.InputTuple,
    SetRewardFeeRatioEvent.OutputTuple,
    SetRewardFeeRatioEvent.OutputObject
  >;
  getEvent(
    key: "SetRewardFeeRatioRequest"
  ): TypedContractEvent<
    SetRewardFeeRatioRequestEvent.InputTuple,
    SetRewardFeeRatioRequestEvent.OutputTuple,
    SetRewardFeeRatioRequestEvent.OutputObject
  >;
  getEvent(
    key: "SetRewardFeeRatioRequestDelay"
  ): TypedContractEvent<
    SetRewardFeeRatioRequestDelayEvent.InputTuple,
    SetRewardFeeRatioRequestDelayEvent.OutputTuple,
    SetRewardFeeRatioRequestDelayEvent.OutputObject
  >;
  getEvent(
    key: "SetUnbondTime"
  ): TypedContractEvent<
    SetUnbondTimeEvent.InputTuple,
    SetUnbondTimeEvent.OutputTuple,
    SetUnbondTimeEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawalNFT"
  ): TypedContractEvent<
    SetWithdrawalNFTEvent.InputTuple,
    SetWithdrawalNFTEvent.OutputTuple,
    SetWithdrawalNFTEvent.OutputObject
  >;
  getEvent(
    key: "UnlockContract"
  ): TypedContractEvent<
    UnlockContractEvent.InputTuple,
    UnlockContractEvent.OutputTuple,
    UnlockContractEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequest"
  ): TypedContractEvent<
    WithdrawRequestEvent.InputTuple,
    WithdrawRequestEvent.OutputTuple,
    WithdrawRequestEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Harvest(address,uint256,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LockContract(uint256)": TypedContractEvent<
      LockContractEvent.InputTuple,
      LockContractEvent.OutputTuple,
      LockContractEvent.OutputObject
    >;
    LockContract: TypedContractEvent<
      LockContractEvent.InputTuple,
      LockContractEvent.OutputTuple,
      LockContractEvent.OutputObject
    >;

    "LogOnReward(address,uint256)": TypedContractEvent<
      LogOnRewardEvent.InputTuple,
      LogOnRewardEvent.OutputTuple,
      LogOnRewardEvent.OutputObject
    >;
    LogOnReward: TypedContractEvent<
      LogOnRewardEvent.InputTuple,
      LogOnRewardEvent.OutputTuple,
      LogOnRewardEvent.OutputObject
    >;

    "LogPoolAddition(uint256,address,bool,address,address,uint256)": TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;
    LogPoolAddition: TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;

    "LogSetPool(uint256,address,address,uint256)": TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;
    LogSetPool: TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;

    "LogUpdatePool(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;
    LogUpdatePool: TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;

    "NCPDeposit(address,uint256,bytes,address,uint256,address,uint256)": TypedContractEvent<
      NCPDepositEvent.InputTuple,
      NCPDepositEvent.OutputTuple,
      NCPDepositEvent.OutputObject
    >;
    NCPDeposit: TypedContractEvent<
      NCPDepositEvent.InputTuple,
      NCPDepositEvent.OutputTuple,
      NCPDepositEvent.OutputObject
    >;

    "NCPHarvest(address,uint256,bytes,address,uint256,address)": TypedContractEvent<
      NCPHarvestEvent.InputTuple,
      NCPHarvestEvent.OutputTuple,
      NCPHarvestEvent.OutputObject
    >;
    NCPHarvest: TypedContractEvent<
      NCPHarvestEvent.InputTuple,
      NCPHarvestEvent.OutputTuple,
      NCPHarvestEvent.OutputObject
    >;

    "NCPWithdraw(address,uint256,bytes,address,uint256,address)": TypedContractEvent<
      NCPWithdrawEvent.InputTuple,
      NCPWithdrawEvent.OutputTuple,
      NCPWithdrawEvent.OutputObject
    >;
    NCPWithdraw: TypedContractEvent<
      NCPWithdrawEvent.InputTuple,
      NCPWithdrawEvent.OutputTuple,
      NCPWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetFeeCollector(address,address)": TypedContractEvent<
      SetFeeCollectorEvent.InputTuple,
      SetFeeCollectorEvent.OutputTuple,
      SetFeeCollectorEvent.OutputObject
    >;
    SetFeeCollector: TypedContractEvent<
      SetFeeCollectorEvent.InputTuple,
      SetFeeCollectorEvent.OutputTuple,
      SetFeeCollectorEvent.OutputObject
    >;

    "SetMultiplierPointBasis(uint256,uint256)": TypedContractEvent<
      SetMultiplierPointBasisEvent.InputTuple,
      SetMultiplierPointBasisEvent.OutputTuple,
      SetMultiplierPointBasisEvent.OutputObject
    >;
    SetMultiplierPointBasis: TypedContractEvent<
      SetMultiplierPointBasisEvent.InputTuple,
      SetMultiplierPointBasisEvent.OutputTuple,
      SetMultiplierPointBasisEvent.OutputObject
    >;

    "SetPlatformFeeRatio(uint256,uint256)": TypedContractEvent<
      SetPlatformFeeRatioEvent.InputTuple,
      SetPlatformFeeRatioEvent.OutputTuple,
      SetPlatformFeeRatioEvent.OutputObject
    >;
    SetPlatformFeeRatio: TypedContractEvent<
      SetPlatformFeeRatioEvent.InputTuple,
      SetPlatformFeeRatioEvent.OutputTuple,
      SetPlatformFeeRatioEvent.OutputObject
    >;

    "SetPoolBreaker(uint256,address)": TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;
    SetPoolBreaker: TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;

    "SetPoolBreakerSetter(uint256,address)": TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;
    SetPoolBreakerSetter: TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;

    "SetRewardFeeRatio(uint256,uint256,uint256)": TypedContractEvent<
      SetRewardFeeRatioEvent.InputTuple,
      SetRewardFeeRatioEvent.OutputTuple,
      SetRewardFeeRatioEvent.OutputObject
    >;
    SetRewardFeeRatio: TypedContractEvent<
      SetRewardFeeRatioEvent.InputTuple,
      SetRewardFeeRatioEvent.OutputTuple,
      SetRewardFeeRatioEvent.OutputObject
    >;

    "SetRewardFeeRatioRequest(uint256,uint256,uint256,uint256)": TypedContractEvent<
      SetRewardFeeRatioRequestEvent.InputTuple,
      SetRewardFeeRatioRequestEvent.OutputTuple,
      SetRewardFeeRatioRequestEvent.OutputObject
    >;
    SetRewardFeeRatioRequest: TypedContractEvent<
      SetRewardFeeRatioRequestEvent.InputTuple,
      SetRewardFeeRatioRequestEvent.OutputTuple,
      SetRewardFeeRatioRequestEvent.OutputObject
    >;

    "SetRewardFeeRatioRequestDelay(uint256,uint256)": TypedContractEvent<
      SetRewardFeeRatioRequestDelayEvent.InputTuple,
      SetRewardFeeRatioRequestDelayEvent.OutputTuple,
      SetRewardFeeRatioRequestDelayEvent.OutputObject
    >;
    SetRewardFeeRatioRequestDelay: TypedContractEvent<
      SetRewardFeeRatioRequestDelayEvent.InputTuple,
      SetRewardFeeRatioRequestDelayEvent.OutputTuple,
      SetRewardFeeRatioRequestDelayEvent.OutputObject
    >;

    "SetUnbondTime(uint256)": TypedContractEvent<
      SetUnbondTimeEvent.InputTuple,
      SetUnbondTimeEvent.OutputTuple,
      SetUnbondTimeEvent.OutputObject
    >;
    SetUnbondTime: TypedContractEvent<
      SetUnbondTimeEvent.InputTuple,
      SetUnbondTimeEvent.OutputTuple,
      SetUnbondTimeEvent.OutputObject
    >;

    "SetWithdrawalNFT(address,address)": TypedContractEvent<
      SetWithdrawalNFTEvent.InputTuple,
      SetWithdrawalNFTEvent.OutputTuple,
      SetWithdrawalNFTEvent.OutputObject
    >;
    SetWithdrawalNFT: TypedContractEvent<
      SetWithdrawalNFTEvent.InputTuple,
      SetWithdrawalNFTEvent.OutputTuple,
      SetWithdrawalNFTEvent.OutputObject
    >;

    "UnlockContract(uint256)": TypedContractEvent<
      UnlockContractEvent.InputTuple,
      UnlockContractEvent.OutputTuple,
      UnlockContractEvent.OutputObject
    >;
    UnlockContract: TypedContractEvent<
      UnlockContractEvent.InputTuple,
      UnlockContractEvent.OutputTuple,
      UnlockContractEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawRequest(address,uint256,bytes,address,uint256,address,uint256)": TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
    WithdrawRequest: TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
  };
}
