/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IWeswapFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPairs"
      | "allPairsLength"
      | "breaker"
      | "breakerSetter"
      | "createPair"
      | "feeTo"
      | "feeToSetter"
      | "getPair"
      | "setFeeTo"
      | "setFeeToSetter"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddWhitelist"
      | "PairCreated"
      | "RemoveWhitelist"
      | "SetBreaker"
      | "SetBreakerSetter"
      | "SetFeeTo"
      | "SetFeeToSetter"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "breaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "breakerSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breakerSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace AddWhitelistEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCreatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    pair: AddressLike,
    arg3: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    pair: string,
    arg3: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    pair: string;
    arg3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveWhitelistEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBreakerEvent {
  export type InputTuple = [from_: AddressLike, to_: AddressLike];
  export type OutputTuple = [from_: string, to_: string];
  export interface OutputObject {
    from_: string;
    to_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBreakerSetterEvent {
  export type InputTuple = [from_: AddressLike, to_: AddressLike];
  export type OutputTuple = [from_: string, to_: string];
  export interface OutputObject {
    from_: string;
    to_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeToEvent {
  export type InputTuple = [from_: AddressLike, to_: AddressLike];
  export type OutputTuple = [from_: string, to_: string];
  export interface OutputObject {
    from_: string;
    to_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeToSetterEvent {
  export type InputTuple = [from_: AddressLike, to_: AddressLike];
  export type OutputTuple = [from_: string, to_: string];
  export interface OutputObject {
    from_: string;
    to_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWeswapFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IWeswapFactory;
  waitForDeployment(): Promise<this>;

  interface: IWeswapFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPairs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allPairsLength: TypedContractMethod<[], [bigint], "view">;

  breaker: TypedContractMethod<[], [string], "view">;

  breakerSetter: TypedContractMethod<[], [string], "view">;

  createPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "nonpayable"
  >;

  feeTo: TypedContractMethod<[], [string], "view">;

  feeToSetter: TypedContractMethod<[], [string], "view">;

  getPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;

  setFeeTo: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  setFeeToSetter: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPairs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPairsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "breaker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "breakerSetter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeToSetter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFeeTo"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeToSetter"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddWhitelist"
  ): TypedContractEvent<
    AddWhitelistEvent.InputTuple,
    AddWhitelistEvent.OutputTuple,
    AddWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "PairCreated"
  ): TypedContractEvent<
    PairCreatedEvent.InputTuple,
    PairCreatedEvent.OutputTuple,
    PairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveWhitelist"
  ): TypedContractEvent<
    RemoveWhitelistEvent.InputTuple,
    RemoveWhitelistEvent.OutputTuple,
    RemoveWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "SetBreaker"
  ): TypedContractEvent<
    SetBreakerEvent.InputTuple,
    SetBreakerEvent.OutputTuple,
    SetBreakerEvent.OutputObject
  >;
  getEvent(
    key: "SetBreakerSetter"
  ): TypedContractEvent<
    SetBreakerSetterEvent.InputTuple,
    SetBreakerSetterEvent.OutputTuple,
    SetBreakerSetterEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeTo"
  ): TypedContractEvent<
    SetFeeToEvent.InputTuple,
    SetFeeToEvent.OutputTuple,
    SetFeeToEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeToSetter"
  ): TypedContractEvent<
    SetFeeToSetterEvent.InputTuple,
    SetFeeToSetterEvent.OutputTuple,
    SetFeeToSetterEvent.OutputObject
  >;

  filters: {
    "AddWhitelist(address)": TypedContractEvent<
      AddWhitelistEvent.InputTuple,
      AddWhitelistEvent.OutputTuple,
      AddWhitelistEvent.OutputObject
    >;
    AddWhitelist: TypedContractEvent<
      AddWhitelistEvent.InputTuple,
      AddWhitelistEvent.OutputTuple,
      AddWhitelistEvent.OutputObject
    >;

    "PairCreated(address,address,address,uint256)": TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
    PairCreated: TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;

    "RemoveWhitelist(address)": TypedContractEvent<
      RemoveWhitelistEvent.InputTuple,
      RemoveWhitelistEvent.OutputTuple,
      RemoveWhitelistEvent.OutputObject
    >;
    RemoveWhitelist: TypedContractEvent<
      RemoveWhitelistEvent.InputTuple,
      RemoveWhitelistEvent.OutputTuple,
      RemoveWhitelistEvent.OutputObject
    >;

    "SetBreaker(address,address)": TypedContractEvent<
      SetBreakerEvent.InputTuple,
      SetBreakerEvent.OutputTuple,
      SetBreakerEvent.OutputObject
    >;
    SetBreaker: TypedContractEvent<
      SetBreakerEvent.InputTuple,
      SetBreakerEvent.OutputTuple,
      SetBreakerEvent.OutputObject
    >;

    "SetBreakerSetter(address,address)": TypedContractEvent<
      SetBreakerSetterEvent.InputTuple,
      SetBreakerSetterEvent.OutputTuple,
      SetBreakerSetterEvent.OutputObject
    >;
    SetBreakerSetter: TypedContractEvent<
      SetBreakerSetterEvent.InputTuple,
      SetBreakerSetterEvent.OutputTuple,
      SetBreakerSetterEvent.OutputObject
    >;

    "SetFeeTo(address,address)": TypedContractEvent<
      SetFeeToEvent.InputTuple,
      SetFeeToEvent.OutputTuple,
      SetFeeToEvent.OutputObject
    >;
    SetFeeTo: TypedContractEvent<
      SetFeeToEvent.InputTuple,
      SetFeeToEvent.OutputTuple,
      SetFeeToEvent.OutputObject
    >;

    "SetFeeToSetter(address,address)": TypedContractEvent<
      SetFeeToSetterEvent.InputTuple,
      SetFeeToSetterEvent.OutputTuple,
      SetFeeToSetterEvent.OutputObject
    >;
    SetFeeToSetter: TypedContractEvent<
      SetFeeToSetterEvent.InputTuple,
      SetFeeToSetterEvent.OutputTuple,
      SetFeeToSetterEvent.OutputObject
    >;
  };
}
