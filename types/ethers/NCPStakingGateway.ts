/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace INCPGateway {
  export type NCPInfoStruct = {
    pid: BigNumberish;
    ncpAddr: AddressLike;
    accRewardPerShare: BigNumberish;
    accMPPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    totalDeposit: BigNumberish;
    totalMP: BigNumberish;
    unbondTime: BigNumberish;
    totalRequestedWithdrawal: BigNumberish;
    reward: BigNumberish;
    APR: BigNumberish;
    ShareRatio: BigNumberish;
    feeRatio: BigNumberish;
    actevatedMP: boolean;
    lock: boolean;
    breaker: AddressLike;
    breakerSetter: AddressLike;
    feeCollector: AddressLike;
    totalDepositors: BigNumberish;
    feeRequestRatio: BigNumberish;
    feeRequestBlockNumber: BigNumberish;
  };

  export type NCPInfoStructOutput = [
    pid: bigint,
    ncpAddr: string,
    accRewardPerShare: bigint,
    accMPPerShare: bigint,
    lastRewardBlock: bigint,
    totalDeposit: bigint,
    totalMP: bigint,
    unbondTime: bigint,
    totalRequestedWithdrawal: bigint,
    reward: bigint,
    APR: bigint,
    ShareRatio: bigint,
    feeRatio: bigint,
    actevatedMP: boolean,
    lock: boolean,
    breaker: string,
    breakerSetter: string,
    feeCollector: string,
    totalDepositors: bigint,
    feeRequestRatio: bigint,
    feeRequestBlockNumber: bigint
  ] & {
    pid: bigint;
    ncpAddr: string;
    accRewardPerShare: bigint;
    accMPPerShare: bigint;
    lastRewardBlock: bigint;
    totalDeposit: bigint;
    totalMP: bigint;
    unbondTime: bigint;
    totalRequestedWithdrawal: bigint;
    reward: bigint;
    APR: bigint;
    ShareRatio: bigint;
    feeRatio: bigint;
    actevatedMP: boolean;
    lock: boolean;
    breaker: string;
    breakerSetter: string;
    feeCollector: string;
    totalDepositors: bigint;
    feeRequestRatio: bigint;
    feeRequestBlockNumber: bigint;
  };

  export type UserInfoStruct = {
    pid: BigNumberish;
    depositAmount: BigNumberish;
    pendingReward: BigNumberish;
    APR: BigNumberish;
    APY: BigNumberish;
    lastRewardClaimed: BigNumberish;
  };

  export type UserInfoStructOutput = [
    pid: bigint,
    depositAmount: bigint,
    pendingReward: bigint,
    APR: bigint,
    APY: bigint,
    lastRewardClaimed: bigint
  ] & {
    pid: bigint;
    depositAmount: bigint;
    pendingReward: bigint;
    APR: bigint;
    APY: bigint;
    lastRewardClaimed: bigint;
  };

  export type UserWithdrawInfoStruct = {
    tokenid: BigNumberish;
    pid: BigNumberish;
    toPid: BigNumberish;
    amount: BigNumberish;
    requestTime: BigNumberish;
    claimableTime: BigNumberish;
    drawer: AddressLike;
  };

  export type UserWithdrawInfoStructOutput = [
    tokenid: bigint,
    pid: bigint,
    toPid: bigint,
    amount: bigint,
    requestTime: bigint,
    claimableTime: bigint,
    drawer: string
  ] & {
    tokenid: bigint;
    pid: bigint;
    toPid: bigint;
    amount: bigint;
    requestTime: bigint;
    claimableTime: bigint;
    drawer: string;
  };
}

export interface NCPStakingGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NCPStaking"
      | "addPids"
      | "computePoolAPR"
      | "computePoolAPRforFeeChange"
      | "computePoolAPY"
      | "envStorage"
      | "getDepositAmount"
      | "getDepositAmountValue"
      | "getDistributionRatio"
      | "getNCPIds"
      | "getNCPInfo"
      | "getShareRatio"
      | "getTotalDepositAmount"
      | "getTotalDepositAmountValue"
      | "getTotalRewardAPR"
      | "getTotalWithdrawalAmount"
      | "getUserAPR"
      | "getUserDepositAmount"
      | "getUserDepositAmountValue"
      | "getUserDepositOrNot"
      | "getUserInfo"
      | "getUserPendingReward"
      | "getUserPendingRewardValue"
      | "getUserTotalAPR"
      | "getUserTotalDepositAmount"
      | "getUserTotalDepositValue"
      | "getUserTotalPendingReward"
      | "getUserTotalPendingRewardValue"
      | "getUserTotalWithdrawAmount"
      | "getUserTotalWithdrawValue"
      | "getUserWithdrawAmount"
      | "getUserWithdrawRequestInfo"
      | "getUserWithdrawTime"
      | "getUserWithdrawValue"
      | "govStaking"
      | "governance"
      | "initialize"
      | "ncpStaking"
      | "owner"
      | "removedPools"
      | "renounceOwnership"
      | "transferOwnership"
      | "weswapGateway"
      | "withdrawNFT"
      | "withdrawalNFT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NCPStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolAPR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolAPRforFeeChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolAPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "envStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmountValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNCPIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNCPInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShareRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositAmountValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardAPR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWithdrawalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAPR",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositAmountValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDepositOrNot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingRewardValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalAPR",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalDepositAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalDepositValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalPendingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalPendingRewardValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalWithdrawAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalWithdrawValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawRequestInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "govStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ncpStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removedPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weswapGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalNFT",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NCPStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computePoolAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolAPRforFeeChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "envStorage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNCPIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNCPInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShareRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDepositOrNot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingRewardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalDepositValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalPendingRewardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalWithdrawValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ncpStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weswapGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalNFT",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NCPStakingGateway extends BaseContract {
  connect(runner?: ContractRunner | null): NCPStakingGateway;
  waitForDeployment(): Promise<this>;

  interface: NCPStakingGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NCPStaking: TypedContractMethod<[], [string], "view">;

  addPids: TypedContractMethod<[newPid: BigNumberish], [void], "nonpayable">;

  computePoolAPR: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  computePoolAPRforFeeChange: TypedContractMethod<
    [pid: BigNumberish],
    [bigint],
    "view"
  >;

  computePoolAPY: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  envStorage: TypedContractMethod<[], [string], "view">;

  getDepositAmount: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  getDepositAmountValue: TypedContractMethod<
    [pid: BigNumberish],
    [bigint],
    "view"
  >;

  getDistributionRatio: TypedContractMethod<
    [pid: BigNumberish],
    [bigint],
    "view"
  >;

  getNCPIds: TypedContractMethod<[], [bigint[]], "view">;

  getNCPInfo: TypedContractMethod<
    [],
    [INCPGateway.NCPInfoStructOutput[]],
    "view"
  >;

  getShareRatio: TypedContractMethod<[pid: BigNumberish], [bigint], "view">;

  getTotalDepositAmount: TypedContractMethod<[], [bigint], "view">;

  getTotalDepositAmountValue: TypedContractMethod<[], [bigint], "view">;

  getTotalRewardAPR: TypedContractMethod<[], [bigint], "view">;

  getTotalWithdrawalAmount: TypedContractMethod<[], [bigint], "view">;

  getUserAPR: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserDepositAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserDepositAmountValue: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserDepositOrNot: TypedContractMethod<
    [user: AddressLike],
    [boolean[]],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [user: AddressLike],
    [INCPGateway.UserInfoStructOutput[]],
    "view"
  >;

  getUserPendingReward: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserPendingRewardValue: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserTotalAPR: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserTotalDepositAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalDepositValue: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalPendingReward: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalPendingRewardValue: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalWithdrawAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalWithdrawValue: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserWithdrawAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserWithdrawRequestInfo: TypedContractMethod<
    [user: AddressLike],
    [INCPGateway.UserWithdrawInfoStructOutput[]],
    "view"
  >;

  getUserWithdrawTime: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserWithdrawValue: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  govStaking: TypedContractMethod<[], [string], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _ncpStaking: AddressLike,
      _governance: AddressLike,
      _govStaking: AddressLike,
      _withdrawNFT: AddressLike,
      _envStorage: AddressLike,
      _weswapGateway: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  ncpStaking: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removedPools: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weswapGateway: TypedContractMethod<[], [string], "view">;

  withdrawNFT: TypedContractMethod<[], [string], "view">;

  withdrawalNFT: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NCPStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addPids"
  ): TypedContractMethod<[newPid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computePoolAPR"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "computePoolAPRforFeeChange"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "computePoolAPY"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "envStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDepositAmount"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositAmountValue"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDistributionRatio"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNCPIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getNCPInfo"
  ): TypedContractMethod<[], [INCPGateway.NCPInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getShareRatio"
  ): TypedContractMethod<[pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDepositAmountValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalRewardAPR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalWithdrawalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAPR"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDepositAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDepositAmountValue"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDepositOrNot"
  ): TypedContractMethod<[user: AddressLike], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [INCPGateway.UserInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPendingReward"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserPendingRewardValue"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserTotalAPR"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalDepositAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalDepositValue"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalPendingReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalPendingRewardValue"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalWithdrawAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalWithdrawValue"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserWithdrawAmount"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserWithdrawRequestInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [INCPGateway.UserWithdrawInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWithdrawTime"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserWithdrawValue"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "govStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _ncpStaking: AddressLike,
      _governance: AddressLike,
      _govStaking: AddressLike,
      _withdrawNFT: AddressLike,
      _envStorage: AddressLike,
      _weswapGateway: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ncpStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removedPools"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weswapGateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawalNFT"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
