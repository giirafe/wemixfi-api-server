/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StWEMIXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "compound"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "disableUserInfoContract"
      | "fee"
      | "feePhaseOne"
      | "feePhaseTwo"
      | "feeUpdate"
      | "getPooledWEMIXBySharesWithFee"
      | "getSharesByPooledWEMIXWithFee"
      | "getTotalPooledWEMIXWithFee"
      | "increaseAllowance"
      | "initialize"
      | "name"
      | "owner"
      | "paused"
      | "phaseShift"
      | "phaseTwo"
      | "pid"
      | "renounceOwnership"
      | "rewardOf"
      | "staking"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "treasury"
      | "updateUserInfoContract"
      | "userInfo"
      | "userInfoContract"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Deposited"
      | "Fee"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "PhaseShift"
      | "SetFee"
      | "SetStaking"
      | "Transfer"
      | "Unpaused"
      | "UpdateUserInfo"
      | "Withdrew"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "compound", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableUserInfoContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePhaseOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePhaseTwo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPooledWEMIXBySharesWithFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesByPooledWEMIXWithFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPooledWEMIXWithFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phaseShift",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "phaseTwo", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUserInfoContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfoContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableUserInfoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePhaseOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePhaseTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPooledWEMIXBySharesWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesByPooledWEMIXWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPooledWEMIXWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phaseShift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phaseTwo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserInfoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInfoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    sender: AddressLike,
    wemixAmount: BigNumberish,
    stWemixAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    wemixAmount: bigint,
    stWemixAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    wemixAmount: bigint;
    stWemixAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEvent {
  export type InputTuple = [
    feeTo: AddressLike,
    wemixAmount: BigNumberish,
    stWemixAmount: BigNumberish
  ];
  export type OutputTuple = [
    feeTo: string,
    wemixAmount: bigint,
    stWemixAmount: bigint
  ];
  export interface OutputObject {
    feeTo: string;
    wemixAmount: bigint;
    stWemixAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseShiftEvent {
  export type InputTuple = [phase: BigNumberish];
  export type OutputTuple = [phase: bigint];
  export interface OutputObject {
    phase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeEvent {
  export type InputTuple = [prevFee: BigNumberish, currFee: BigNumberish];
  export type OutputTuple = [prevFee: bigint, currFee: bigint];
  export interface OutputObject {
    prevFee: bigint;
    currFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetStakingEvent {
  export type InputTuple = [staking: AddressLike, pid: BigNumberish];
  export type OutputTuple = [staking: string, pid: bigint];
  export interface OutputObject {
    staking: string;
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateUserInfoEvent {
  export type InputTuple = [prev: AddressLike, curr: AddressLike];
  export type OutputTuple = [prev: string, curr: string];
  export interface OutputObject {
    prev: string;
    curr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrewEvent {
  export type InputTuple = [
    sender: AddressLike,
    wemixAmount: BigNumberish,
    stWemixAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    wemixAmount: bigint,
    stWemixAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    wemixAmount: bigint;
    stWemixAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StWEMIX extends BaseContract {
  connect(runner?: ContractRunner | null): StWEMIX;
  waitForDeployment(): Promise<this>;

  interface: StWEMIXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  compound: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [bigint], "payable">;

  disableUserInfoContract: TypedContractMethod<[], [void], "nonpayable">;

  fee: TypedContractMethod<[], [bigint], "view">;

  feePhaseOne: TypedContractMethod<[], [bigint], "view">;

  feePhaseTwo: TypedContractMethod<[], [bigint], "view">;

  feeUpdate: TypedContractMethod<
    [newFeePhaseTwo: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPooledWEMIXBySharesWithFee: TypedContractMethod<
    [shareAmount_: BigNumberish],
    [bigint],
    "view"
  >;

  getSharesByPooledWEMIXWithFee: TypedContractMethod<
    [wemixAmount_: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalPooledWEMIXWithFee: TypedContractMethod<[], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      staking_: AddressLike,
      treasury_: AddressLike,
      pid_: BigNumberish,
      feePhaseOne_: BigNumberish,
      feePhaseTwo_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  phaseShift: TypedContractMethod<[], [void], "nonpayable">;

  phaseTwo: TypedContractMethod<[], [boolean], "view">;

  pid: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardOf: TypedContractMethod<[account_: AddressLike], [bigint], "view">;

  staking: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateUserInfoContract: TypedContractMethod<
    [newUserInfoContract: AddressLike],
    [void],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [account_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stWemixamount_: bigint;
        wemixAmount_: bigint;
        timestamp_: bigint;
      }
    ],
    "view"
  >;

  userInfoContract: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[amount_: BigNumberish], [bigint], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "disableUserInfoContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePhaseOne"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePhaseTwo"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeUpdate"
  ): TypedContractMethod<[newFeePhaseTwo: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPooledWEMIXBySharesWithFee"
  ): TypedContractMethod<[shareAmount_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSharesByPooledWEMIXWithFee"
  ): TypedContractMethod<[wemixAmount_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPooledWEMIXWithFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      staking_: AddressLike,
      treasury_: AddressLike,
      pid_: BigNumberish,
      feePhaseOne_: BigNumberish,
      feePhaseTwo_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "phaseShift"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "phaseTwo"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardOf"
  ): TypedContractMethod<[account_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateUserInfoContract"
  ): TypedContractMethod<
    [newUserInfoContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [account_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stWemixamount_: bigint;
        wemixAmount_: bigint;
        timestamp_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userInfoContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount_: BigNumberish], [bigint], "payable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Fee"
  ): TypedContractEvent<
    FeeEvent.InputTuple,
    FeeEvent.OutputTuple,
    FeeEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PhaseShift"
  ): TypedContractEvent<
    PhaseShiftEvent.InputTuple,
    PhaseShiftEvent.OutputTuple,
    PhaseShiftEvent.OutputObject
  >;
  getEvent(
    key: "SetFee"
  ): TypedContractEvent<
    SetFeeEvent.InputTuple,
    SetFeeEvent.OutputTuple,
    SetFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetStaking"
  ): TypedContractEvent<
    SetStakingEvent.InputTuple,
    SetStakingEvent.OutputTuple,
    SetStakingEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateUserInfo"
  ): TypedContractEvent<
    UpdateUserInfoEvent.InputTuple,
    UpdateUserInfoEvent.OutputTuple,
    UpdateUserInfoEvent.OutputObject
  >;
  getEvent(
    key: "Withdrew"
  ): TypedContractEvent<
    WithdrewEvent.InputTuple,
    WithdrewEvent.OutputTuple,
    WithdrewEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Fee(address,uint256,uint256)": TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;
    Fee: TypedContractEvent<
      FeeEvent.InputTuple,
      FeeEvent.OutputTuple,
      FeeEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PhaseShift(uint256)": TypedContractEvent<
      PhaseShiftEvent.InputTuple,
      PhaseShiftEvent.OutputTuple,
      PhaseShiftEvent.OutputObject
    >;
    PhaseShift: TypedContractEvent<
      PhaseShiftEvent.InputTuple,
      PhaseShiftEvent.OutputTuple,
      PhaseShiftEvent.OutputObject
    >;

    "SetFee(uint256,uint256)": TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;
    SetFee: TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;

    "SetStaking(address,uint256)": TypedContractEvent<
      SetStakingEvent.InputTuple,
      SetStakingEvent.OutputTuple,
      SetStakingEvent.OutputObject
    >;
    SetStaking: TypedContractEvent<
      SetStakingEvent.InputTuple,
      SetStakingEvent.OutputTuple,
      SetStakingEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateUserInfo(address,address)": TypedContractEvent<
      UpdateUserInfoEvent.InputTuple,
      UpdateUserInfoEvent.OutputTuple,
      UpdateUserInfoEvent.OutputObject
    >;
    UpdateUserInfo: TypedContractEvent<
      UpdateUserInfoEvent.InputTuple,
      UpdateUserInfoEvent.OutputTuple,
      UpdateUserInfoEvent.OutputObject
    >;

    "Withdrew(address,uint256,uint256)": TypedContractEvent<
      WithdrewEvent.InputTuple,
      WithdrewEvent.OutputTuple,
      WithdrewEvent.OutputObject
    >;
    Withdrew: TypedContractEvent<
      WithdrewEvent.InputTuple,
      WithdrewEvent.OutputTuple,
      WithdrewEvent.OutputObject
    >;
  };
}
