/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WemixDollarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPool"
      | "addPoolWhitelist"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "decimals"
      | "decreaseAllowance"
      | "getWemixDollarInfo"
      | "getWemixDollarInfoCount"
      | "getWhitelistAddress"
      | "getWhitelistAddressCount"
      | "increaseAllowance"
      | "isWhitelist"
      | "mint"
      | "name"
      | "owner"
      | "removePoolWhitelist"
      | "renounceOwnership"
      | "replacePoolWhitelist"
      | "resumeContract"
      | "setPoolBreaker"
      | "setPoolBreakerSetter"
      | "setPoolOwner"
      | "setPoolOwnerSetter"
      | "stopContract"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "wemixDollarInfos"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddPool"
      | "AddPoolWhitelist"
      | "Approval"
      | "OwnershipTransferred"
      | "RemovePoolWhitelist"
      | "ResumeContract"
      | "SetPoolBreaker"
      | "SetPoolBreakerSetter"
      | "SetPoolOwner"
      | "SetPoolOwnerSetter"
      | "StopContract"
      | "Transfer"
      | "WemixDollarBurned"
      | "WemixDollarMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      string,
      AddressLike[],
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolWhitelist",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWemixDollarInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWemixDollarInfoCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistAddressCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePoolWhitelist",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacePoolWhitelist",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreaker",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolBreakerSetter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwner",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolOwnerSetter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wemixDollarInfos",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPoolWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWemixDollarInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWemixDollarInfoCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistAddressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePoolWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacePoolWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolBreakerSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolOwnerSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wemixDollarInfos",
    data: BytesLike
  ): Result;
}

export namespace AddPoolEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    poolName: string,
    whitelists: AddressLike[],
    owner: AddressLike,
    ownerSetter: AddressLike,
    breaker: AddressLike,
    breakerSetter: AddressLike,
    stop: boolean
  ];
  export type OutputTuple = [
    poolId: bigint,
    poolName: string,
    whitelists: string[],
    owner: string,
    ownerSetter: string,
    breaker: string,
    breakerSetter: string,
    stop: boolean
  ];
  export interface OutputObject {
    poolId: bigint;
    poolName: string;
    whitelists: string[];
    owner: string;
    ownerSetter: string;
    breaker: string;
    breakerSetter: string;
    stop: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddPoolWhitelistEvent {
  export type InputTuple = [poolId: BigNumberish, whitelist: AddressLike];
  export type OutputTuple = [poolId: bigint, whitelist: string];
  export interface OutputObject {
    poolId: bigint;
    whitelist: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovePoolWhitelistEvent {
  export type InputTuple = [poolId: BigNumberish, whitelist: AddressLike];
  export type OutputTuple = [poolId: bigint, whitelist: string];
  export interface OutputObject {
    poolId: bigint;
    whitelist: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumeContractEvent {
  export type InputTuple = [poolId: BigNumberish];
  export type OutputTuple = [poolId: bigint];
  export interface OutputObject {
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerEvent {
  export type InputTuple = [poolId: BigNumberish, breaker: AddressLike];
  export type OutputTuple = [poolId: bigint, breaker: string];
  export interface OutputObject {
    poolId: bigint;
    breaker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolBreakerSetterEvent {
  export type InputTuple = [poolId: BigNumberish, breakerSetter: AddressLike];
  export type OutputTuple = [poolId: bigint, breakerSetter: string];
  export interface OutputObject {
    poolId: bigint;
    breakerSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolOwnerEvent {
  export type InputTuple = [poolId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [poolId: bigint, owner: string];
  export interface OutputObject {
    poolId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolOwnerSetterEvent {
  export type InputTuple = [poolId: BigNumberish, ownerSetter: AddressLike];
  export type OutputTuple = [poolId: bigint, ownerSetter: string];
  export interface OutputObject {
    poolId: bigint;
    ownerSetter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StopContractEvent {
  export type InputTuple = [poolId: BigNumberish];
  export type OutputTuple = [poolId: bigint];
  export interface OutputObject {
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WemixDollarBurnedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    poolId: BigNumberish
  ];
  export type OutputTuple = [from: string, amount: bigint, poolId: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WemixDollarMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    poolId: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, poolId: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    poolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WemixDollar extends BaseContract {
  connect(runner?: ContractRunner | null): WemixDollar;
  waitForDeployment(): Promise<this>;

  interface: WemixDollarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPool: TypedContractMethod<
    [
      _poolName: string,
      _whitelists: AddressLike[],
      _owner: AddressLike,
      _ownerSetter: AddressLike,
      _breaker: AddressLike,
      _breakerSetter: AddressLike,
      _stop: boolean
    ],
    [void],
    "nonpayable"
  >;

  addPoolWhitelist: TypedContractMethod<
    [_poolId: BigNumberish, _whitelist: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getWemixDollarInfo: TypedContractMethod<
    [_poolId: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string[],
        string,
        string,
        string,
        string,
        boolean
      ]
    ],
    "view"
  >;

  getWemixDollarInfoCount: TypedContractMethod<[], [bigint], "view">;

  getWhitelistAddress: TypedContractMethod<
    [_poolId: BigNumberish],
    [string[]],
    "view"
  >;

  getWhitelistAddressCount: TypedContractMethod<
    [_poolId: BigNumberish],
    [bigint],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isWhitelist: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removePoolWhitelist: TypedContractMethod<
    [_poolId: BigNumberish, _whitelist: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replacePoolWhitelist: TypedContractMethod<
    [
      _poolId: BigNumberish,
      _whitelist: AddressLike,
      _newWhitelist: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  resumeContract: TypedContractMethod<
    [_poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolBreaker: TypedContractMethod<
    [_poolId: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolBreakerSetter: TypedContractMethod<
    [_poolId: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolOwner: TypedContractMethod<
    [_poolId: BigNumberish, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolOwnerSetter: TypedContractMethod<
    [_poolId: BigNumberish, _ownerSetter: AddressLike],
    [void],
    "nonpayable"
  >;

  stopContract: TypedContractMethod<
    [_poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wemixDollarInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, string, boolean] & {
        poolId: bigint;
        poolName: string;
        poolTotalSupply: bigint;
        owner: string;
        ownerSetter: string;
        breaker: string;
        breakerSetter: string;
        stop: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPool"
  ): TypedContractMethod<
    [
      _poolName: string,
      _whitelists: AddressLike[],
      _owner: AddressLike,
      _ownerSetter: AddressLike,
      _breaker: AddressLike,
      _breakerSetter: AddressLike,
      _stop: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPoolWhitelist"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _whitelist: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getWemixDollarInfo"
  ): TypedContractMethod<
    [_poolId: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string[],
        string,
        string,
        string,
        string,
        boolean
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWemixDollarInfoCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWhitelistAddress"
  ): TypedContractMethod<[_poolId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWhitelistAddressCount"
  ): TypedContractMethod<[_poolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removePoolWhitelist"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _whitelist: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replacePoolWhitelist"
  ): TypedContractMethod<
    [
      _poolId: BigNumberish,
      _whitelist: AddressLike,
      _newWhitelist: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resumeContract"
  ): TypedContractMethod<[_poolId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolBreaker"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _breaker: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolBreakerSetter"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _breakerSetter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolOwner"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolOwnerSetter"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _ownerSetter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopContract"
  ): TypedContractMethod<[_poolId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wemixDollarInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, string, boolean] & {
        poolId: bigint;
        poolName: string;
        poolTotalSupply: bigint;
        owner: string;
        ownerSetter: string;
        breaker: string;
        breakerSetter: string;
        stop: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AddPool"
  ): TypedContractEvent<
    AddPoolEvent.InputTuple,
    AddPoolEvent.OutputTuple,
    AddPoolEvent.OutputObject
  >;
  getEvent(
    key: "AddPoolWhitelist"
  ): TypedContractEvent<
    AddPoolWhitelistEvent.InputTuple,
    AddPoolWhitelistEvent.OutputTuple,
    AddPoolWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemovePoolWhitelist"
  ): TypedContractEvent<
    RemovePoolWhitelistEvent.InputTuple,
    RemovePoolWhitelistEvent.OutputTuple,
    RemovePoolWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "ResumeContract"
  ): TypedContractEvent<
    ResumeContractEvent.InputTuple,
    ResumeContractEvent.OutputTuple,
    ResumeContractEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreaker"
  ): TypedContractEvent<
    SetPoolBreakerEvent.InputTuple,
    SetPoolBreakerEvent.OutputTuple,
    SetPoolBreakerEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolBreakerSetter"
  ): TypedContractEvent<
    SetPoolBreakerSetterEvent.InputTuple,
    SetPoolBreakerSetterEvent.OutputTuple,
    SetPoolBreakerSetterEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolOwner"
  ): TypedContractEvent<
    SetPoolOwnerEvent.InputTuple,
    SetPoolOwnerEvent.OutputTuple,
    SetPoolOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolOwnerSetter"
  ): TypedContractEvent<
    SetPoolOwnerSetterEvent.InputTuple,
    SetPoolOwnerSetterEvent.OutputTuple,
    SetPoolOwnerSetterEvent.OutputObject
  >;
  getEvent(
    key: "StopContract"
  ): TypedContractEvent<
    StopContractEvent.InputTuple,
    StopContractEvent.OutputTuple,
    StopContractEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WemixDollarBurned"
  ): TypedContractEvent<
    WemixDollarBurnedEvent.InputTuple,
    WemixDollarBurnedEvent.OutputTuple,
    WemixDollarBurnedEvent.OutputObject
  >;
  getEvent(
    key: "WemixDollarMinted"
  ): TypedContractEvent<
    WemixDollarMintedEvent.InputTuple,
    WemixDollarMintedEvent.OutputTuple,
    WemixDollarMintedEvent.OutputObject
  >;

  filters: {
    "AddPool(uint256,string,address[],address,address,address,address,bool)": TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;
    AddPool: TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;

    "AddPoolWhitelist(uint256,address)": TypedContractEvent<
      AddPoolWhitelistEvent.InputTuple,
      AddPoolWhitelistEvent.OutputTuple,
      AddPoolWhitelistEvent.OutputObject
    >;
    AddPoolWhitelist: TypedContractEvent<
      AddPoolWhitelistEvent.InputTuple,
      AddPoolWhitelistEvent.OutputTuple,
      AddPoolWhitelistEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemovePoolWhitelist(uint256,address)": TypedContractEvent<
      RemovePoolWhitelistEvent.InputTuple,
      RemovePoolWhitelistEvent.OutputTuple,
      RemovePoolWhitelistEvent.OutputObject
    >;
    RemovePoolWhitelist: TypedContractEvent<
      RemovePoolWhitelistEvent.InputTuple,
      RemovePoolWhitelistEvent.OutputTuple,
      RemovePoolWhitelistEvent.OutputObject
    >;

    "ResumeContract(uint256)": TypedContractEvent<
      ResumeContractEvent.InputTuple,
      ResumeContractEvent.OutputTuple,
      ResumeContractEvent.OutputObject
    >;
    ResumeContract: TypedContractEvent<
      ResumeContractEvent.InputTuple,
      ResumeContractEvent.OutputTuple,
      ResumeContractEvent.OutputObject
    >;

    "SetPoolBreaker(uint256,address)": TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;
    SetPoolBreaker: TypedContractEvent<
      SetPoolBreakerEvent.InputTuple,
      SetPoolBreakerEvent.OutputTuple,
      SetPoolBreakerEvent.OutputObject
    >;

    "SetPoolBreakerSetter(uint256,address)": TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;
    SetPoolBreakerSetter: TypedContractEvent<
      SetPoolBreakerSetterEvent.InputTuple,
      SetPoolBreakerSetterEvent.OutputTuple,
      SetPoolBreakerSetterEvent.OutputObject
    >;

    "SetPoolOwner(uint256,address)": TypedContractEvent<
      SetPoolOwnerEvent.InputTuple,
      SetPoolOwnerEvent.OutputTuple,
      SetPoolOwnerEvent.OutputObject
    >;
    SetPoolOwner: TypedContractEvent<
      SetPoolOwnerEvent.InputTuple,
      SetPoolOwnerEvent.OutputTuple,
      SetPoolOwnerEvent.OutputObject
    >;

    "SetPoolOwnerSetter(uint256,address)": TypedContractEvent<
      SetPoolOwnerSetterEvent.InputTuple,
      SetPoolOwnerSetterEvent.OutputTuple,
      SetPoolOwnerSetterEvent.OutputObject
    >;
    SetPoolOwnerSetter: TypedContractEvent<
      SetPoolOwnerSetterEvent.InputTuple,
      SetPoolOwnerSetterEvent.OutputTuple,
      SetPoolOwnerSetterEvent.OutputObject
    >;

    "StopContract(uint256)": TypedContractEvent<
      StopContractEvent.InputTuple,
      StopContractEvent.OutputTuple,
      StopContractEvent.OutputObject
    >;
    StopContract: TypedContractEvent<
      StopContractEvent.InputTuple,
      StopContractEvent.OutputTuple,
      StopContractEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WemixDollarBurned(address,uint256,uint256)": TypedContractEvent<
      WemixDollarBurnedEvent.InputTuple,
      WemixDollarBurnedEvent.OutputTuple,
      WemixDollarBurnedEvent.OutputObject
    >;
    WemixDollarBurned: TypedContractEvent<
      WemixDollarBurnedEvent.InputTuple,
      WemixDollarBurnedEvent.OutputTuple,
      WemixDollarBurnedEvent.OutputObject
    >;

    "WemixDollarMinted(address,uint256,uint256)": TypedContractEvent<
      WemixDollarMintedEvent.InputTuple,
      WemixDollarMintedEvent.OutputTuple,
      WemixDollarMintedEvent.OutputObject
    >;
    WemixDollarMinted: TypedContractEvent<
      WemixDollarMintedEvent.InputTuple,
      WemixDollarMintedEvent.OutputTuple,
      WemixDollarMintedEvent.OutputObject
    >;
  };
}
